generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cliente {
  id             Int              @id @default(autoincrement())
  dni            String           @db.VarChar(8)
  nombres        String           @db.VarChar(100)
  apellidos      String           @db.VarChar(100)
  celular        String           @db.VarChar(15)
  estado         Boolean?         @default(true)
  created_at     DateTime         @default(now()) @db.Timestamp(0)
  cliente_pago   cliente_pago[]
  cliente_predio cliente_predio[]
}

model lote {
  id         Int      @id @default(autoincrement())
  valor      String   @db.VarChar(100)
  estado     Boolean  @default(true)
  created_at DateTime @default(now()) @db.Timestamp(0)
  predio     predio[]
}

model manzana {
  id         Int      @id @default(autoincrement())
  valor      String   @db.VarChar(100)
  estado     Boolean  @default(true)
  created_at DateTime @default(now()) @db.Timestamp(0)
  predio     predio[]
}

model cliente_predio {
  id         Int     @id @default(autoincrement())
  cliente_id Int
  predio_id  Int
  cliente    cliente @relation(fields: [cliente_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cliente_predio_ibfk_1")
  predio     predio  @relation(fields: [predio_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cliente_predio_ibfk_2")

  @@unique([cliente_id, predio_id], map: "unique_cliente_predio")
  @@index([predio_id], map: "fk_predio")
}

model predio {
  id             Int              @id @default(autoincrement())
  manzana_id     Int
  lote_id        Int
  disponible     Boolean          @default(true)
  estado         Boolean?         @default(true)
  created_at     DateTime         @default(now()) @db.Timestamp(0)
  cliente_predio cliente_predio[]
  pago           pago[]
  manzana        manzana          @relation(fields: [manzana_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "predio_ibfk_1")
  lote           lote             @relation(fields: [lote_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "predio_ibfk_2")

  @@unique([manzana_id, lote_id], map: "manzana_id")
  @@index([lote_id], map: "lote_id")
}

model cliente_pago {
  cliente_id Int
  pago_id    Int
  cliente    cliente @relation(fields: [cliente_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cliente_pago_ibfk_1")
  pago       pago    @relation(fields: [pago_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cliente_pago_ibfk_2")

  @@id([cliente_id, pago_id])
  @@index([pago_id], map: "pago_id")
}

model pago {
  id            Int            @id @default(autoincrement())
  precio_total  Decimal        @db.Decimal(10, 2)
  cuota_inicial Decimal        @db.Decimal(10, 2)
  saldo         Decimal        @db.Decimal(10, 2)
  predio_id     Int
  created_at    DateTime       @default(now()) @db.Timestamp(0)
  cliente_pago  cliente_pago[]
  cuota         cuota[]
  predio        predio         @relation(fields: [predio_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "pago_ibfk_1")

  @@index([predio_id], map: "predio_id")
}

model cuota {
  id                Int       @id @default(autoincrement())
  id_pago           Int
  numero_cuota      Int
  monto             Decimal   @db.Decimal(10, 2)
  fecha_pago        DateTime? @db.Date
  fecha_vencimiento DateTime  @db.Date
  estado            Boolean?  @default(false)
  created_at        DateTime  @default(now()) @db.Timestamp(0)
  pago              pago      @relation(fields: [id_pago], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cuota_ibfk_1")

  @@index([id_pago], map: "id_pago")
}
